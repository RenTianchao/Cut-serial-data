package com.factortest;

import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class Main {

    public static void main(String[] args) {
	// write your code here

        byte[] input = new byte[]{
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12
                0x79,0x00,0x12, (byte) 0x88,0x05,0x48,0x44,0x4D,0x49,0x31,0x00,0x01,0x0D, (byte) 0xFE,//14
                0x79,0x00,0x12, (byte) 0x88,0x03,0x41,0x54,0x56,0x00,0x01,0x77, (byte) 0xFE, //12

        };



        SepBuffer sepBuffer = new SepBuffer();
        byte[] cmd1 =  sepBuffer.cutBuffer(input);
        // lisener.onDataAvailable("SERIAL", cmd1,size,sum.toString());
        //unlock

    }
    public static class SepBuffer{
        public  byte[] cutBuffer(byte[] buffers){
            byte[] buffer = buffers;
            Queue<byte[]> queue = new LinkedList<>();

            LinkedBlockingQueue<byte[]> blockingQueue = new LinkedBlockingQueue<>();

            //first new buffer from serial
            if (buffer[0] == 0x79 && buffer[4] != 0){ //buffers contains many buffer,and we need to cut them , add to queue one by one
                int k = 0;
                int Len = 0;
                for (byte b:buffer) {
                    Len++;
                }
                int i = 4;
                int len1= buffer[4]+ 9;
                while ( len1 < Len){// i is the size of every buffer. move i means points another buffer
                    k = i;
                    //copy commands
                    if (buffer[i]!=0||buffer != null){
                        byte[] tmp = new byte[buffer[i]+9];
                        tmp[0] = buffer[i-4];
                        tmp[1] = buffer[i-3];
                        tmp[2] = buffer[i-2];
                        tmp[3] = buffer[i-1];
                        //copy data
                        int tmpLen = buffer[i]; //
                        int j = 0;// j points tmp buffer , k points buffers .
                        for (;j< tmpLen+5;k++,j++){
                            tmp[j+4] = buffer[k];
                        }
                        //lock
                        try {
                            blockingQueue.put(tmp);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        //unlock

                        i=i+buffer[i]+9;
                        if (i > Len){
                            break;
                        }
                        len1 = buffer[i];//last buffer


                    }
                }
            }

            //when needs run cmds
            //lock
            byte[] getByte1 = new byte[0];
            try {
                getByte1 = blockingQueue.take();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            for (byte b:getByte1) {
                System.out.print(b+" ");

            }
            return getByte1;
        }
    }



}
